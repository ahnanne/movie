{"version":3,"sources":["webpack://node_modules/@euid/scss-mixins/src/initialize/_normalize.scss","webpack://node_modules/@euid/scss-mixins/src/inheritance/_inherit-box-sizing.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-box-sizing.scss","webpack://node_modules/@euid/scss-mixins/src/inheritance/_inherit-pseudo-elements.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_initialize.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-img.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-button.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-abbr.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-box.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-link.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-list.scss","webpack://node_modules/@euid/scss-mixins/src/spacing/_margin.scss","webpack://node_modules/@euid/scss-mixins/src/initialize/_reset-dl.scss","webpack://node_modules/@euid/scss-mixins/src/responsive-web/_rwd-img.scss","webpack://node_modules/@euid/scss-mixins/src/responsive-web/_rwd-iframe-wrapper.scss","webpack://node_modules/@euid/scss-mixins/src/position/_index.scss","webpack://node_modules/@euid/scss-mixins/src/a11y/_a11y-hidden.scss","webpack://node_modules/@euid/scss-mixins/src/a11y/_focus-visible.scss","webpack://src/assets/styles/_typography.scss","webpack://node_modules/@euid/scss-mixins/src/font/_font.scss","webpack://src/assets/styles/_button.scss","webpack://node_modules/@euid/scss-mixins/src/spacing/_padding.scss","webpack://src/assets/styles/_badge.scss","webpack://src/assets/styles/_tic-tac-toe.scss","webpack://node_modules/@euid/scss-mixins/src/flexbox/_flex-container.scss","webpack://node_modules/@euid/scss-mixins/src/flexbox/_flex-container-append.scss","webpack://node_modules/@euid/scss-mixins/src/font/_font-size-padding.scss","webpack://node_modules/@euid/scss-mixins/src/text/_text.scss","webpack://src/assets/styles/_vanilla-tilt.scss","webpack://src/assets/styles/_pokemon.scss","webpack://node_modules/@euid/scss-mixins/src/ui/_selection.scss","webpack://src/assets/styles/_page.scss","webpack://node_modules/@euid/scss-mixins/src/box-alignment/_align-items.scss","webpack://node_modules/@euid/scss-mixins/src/responsive-web/_media.scss","webpack://node_modules/@euid/scss-mixins/src/box-alignment/_justify-content.scss","webpack://node_modules/@euid/scss-mixins/src/flexbox/_flex.scss"],"names":[],"mappings":"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","file":"main.2b3019bd.chunk.css","sourcesContent":["@mixin normalize {\n  //*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n  // Chrome, Edge, Firefox ESR+, IE 10+, Safari 8+, Opera\n  html {\n    line-height: 1.15;\n    -webkit-text-size-adjust: 100%;\n  }\n  body {\n    margin: 0;\n  }\n  main {\n    display: block;\n  }\n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  hr {\n    box-sizing: content-box;\n    height: 0;\n    overflow: visible;\n  }\n  pre {\n    font-family: monospace, monospace;\n    font-size: 1em;\n  }\n  a {\n    background-color: transparent;\n  }\n  abbr[title] {\n    border-bottom: none;\n    text-decoration: underline;\n    text-decoration: underline dotted;\n  }\n  b,\n  strong {\n    font-weight: bolder;\n  }\n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace;\n    font-size: 1em;\n  }\n  small {\n    font-size: 80%;\n  }\n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  sub {\n    bottom: -0.25em;\n  }\n  sup {\n    top: -0.5em;\n  }\n  img {\n    border-style: none;\n  }\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit;\n    font-size: 100%;\n    line-height: 1.15;\n    margin: 0;\n  }\n  button,\n  input {\n    overflow: visible;\n  }\n  button,\n  select {\n    text-transform: none;\n  }\n  [type='button'],\n  [type='reset'],\n  [type='submit'],\n  button {\n    -webkit-appearance: button;\n  }\n  [type='button']::-moz-focus-inner,\n  [type='reset']::-moz-focus-inner,\n  [type='submit']::-moz-focus-inner,\n  button::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  [type='button']:-moz-focusring,\n  [type='reset']:-moz-focusring,\n  [type='submit']:-moz-focusring,\n  button:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  legend {\n    box-sizing: border-box;\n    color: inherit;\n    display: table;\n    max-width: 100%;\n    padding: 0;\n    white-space: normal;\n  }\n  progress {\n    vertical-align: baseline;\n  }\n  textarea {\n    overflow: auto;\n  }\n  [type='checkbox'],\n  [type='radio'] {\n    box-sizing: border-box;\n    padding: 0;\n  }\n  [type='number']::-webkit-inner-spin-button,\n  [type='number']::-webkit-outer-spin-button {\n    height: auto;\n  }\n  [type='search'] {\n    -webkit-appearance: textfield;\n    outline-offset: -2px;\n  }\n  [type='search']::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  ::-webkit-file-upload-button {\n    -webkit-appearance: button;\n    font: inherit;\n  }\n  details {\n    display: block;\n  }\n  summary {\n    display: list-item;\n  }\n  template {\n    display: none;\n  }\n  [hidden] {\n    display: none;\n  }\n}\n","@mixin inherit-box-sizing($selector: null, $value: border-box) {\n  @if $selector != null {\n    #{$selector} {\n      box-sizing: $value;\n      @include inherit-pseudo-elements(box-sizing);\n      * {\n        box-sizing: inherit;\n        @include inherit-pseudo-elements(box-sizing);\n      }\n    }\n  }\n}\n","@mixin reset-box-sizing($value: border-box) {\n  @include inherit-box-sizing(body, $value);\n}\n","@mixin inherit-pseudo-elements($prop) {\n  &::before,\n  &::after {\n    #{$prop}: inherit;\n  }\n}\n","@mixin initialize($generate-class: false) {\n  @include normalize();\n  @include reset-box-sizing();\n\n  // 참고: https://sass-lang.com/documentation/modules/meta#global-variable-exists\n  @if global-variable-exists('base-rem-size') {\n    html {\n      font-size: $base-rem-size;\n    }\n  }\n\n  img {\n    @include reset-img;\n  }\n\n  button {\n    @include reset-button;\n  }\n\n  abbr[title] {\n    @include reset-abbr;\n  }\n\n  @if $generate-class {\n    .resetBox {\n      @include reset-box;\n    }\n\n    .resetLink {\n      @include reset-link;\n    }\n\n    .restList {\n      @include reset-list;\n    }\n\n    .resetDl {\n      @include reset-dl;\n    }\n\n    .rwdImg {\n      @include rwd-img;\n    }\n\n    .rwdVideo {\n      @include rwd-video;\n    }\n\n    .rwdIframeWrapper {\n      @include rwd-iframe-wrapper;\n    }\n\n    .a11yHidden {\n      @include a11y-hidden;\n    }\n\n    .focusVisible {\n      @include focus-visible;\n    }\n  }\n}\n","@mixin reset-img() {\n  border: 0;\n  vertical-align: middle;\n}\n","@mixin reset-button() {\n  user-select: none;\n  cursor: pointer;\n}\n","@mixin reset-abbr() {\n  cursor: help;\n  text-decoration: none;\n}\n","@mixin reset-box() {\n  margin: 0;\n  border: 0;\n  padding: 0;\n}\n","@mixin reset-link() {\n  text-decoration: none;\n  color: inherit;\n}\n","@mixin reset-list() {\n  @include my(0);\n  padding-left: 0;\n  list-style-type: none;\n}\n","// @include m(20px) → number\n// @include m(t 30 l -20) → list\n// @include m(x 30) → list\n// @include m(y r40) → list\n\n@mixin margin($args...) {\n  @if length($args) == 0 {\n    @error 'margin() 믹스인은 margin 속성의 설정 방향 top, right, bottom, left와 값을 연이어 전달 받을 수 있습니다. 뿐만 아니라 x, y 방향으로 속성을 일괄 설정 가능합니다.';\n  }\n\n  @each $value in $args {\n    $type: type-of($value);\n\n    @if $type == 'number' or $type == 'string' {\n      margin: get-number-or-string($value);\n    }\n\n    @if $type == 'list' {\n      @if is-include-items($value, top t) {\n        margin-top: get-number-or-string(\n          get-match-value-of-keys($value, top t)\n        );\n      }\n      @if is-include-items($value, right r) {\n        margin-right: get-number-or-string(\n          get-match-value-of-keys($value, right r)\n        );\n      }\n      @if is-include-items($value, bottom b) {\n        margin-bottom: get-number-or-string(\n          get-match-value-of-keys($value, bottom b)\n        );\n      }\n      @if is-include-items($value, left l) {\n        margin-left: get-number-or-string(\n          get-match-value-of-keys($value, left l)\n        );\n      }\n      @if is-include-items($value, x) {\n        $x-value: get-value-after-key($value, x);\n        margin-left: get-number-or-string($x-value);\n        margin-right: get-number-or-string($x-value);\n      }\n      @if is-include-items($value, y) {\n        $y-value: get-value-after-key($value, y);\n        margin-top: get-number-or-string($y-value);\n        margin-bottom: get-number-or-string($y-value);\n      }\n    }\n  }\n}\n\n//* -------------------------------------------------------------------------- */\n\n@mixin m($args: null) {\n  @if not $args {\n    @error 'm() 믹스인은 margin 속성의 설정 방향 top, right, bottom, left와 값을 연이어 전달 받을 수 있습니다. 뿐만 아니라 x, y 방향으로 속성을 일괄 설정 가능합니다.';\n  }\n  @include margin($args);\n}\n\n@mixin mx($value) {\n  $value_length: length($value);\n  @if $value_length == 1 {\n    @include m(l $value r $value);\n  }\n  @if $value_length == 2 {\n    @include m(l first($value) r last($value));\n  }\n}\n\n@mixin my($value) {\n  $value_length: length($value);\n  @if $value_length == 1 {\n    @include m(t $value b $value);\n  }\n  @if $value_length == 2 {\n    @include m(t first($value) b last($value));\n  }\n}\n","@mixin reset-dl() {\n  @include my(0);\n  dd {\n    margin-left: 0;\n  }\n}\n","@mixin rwd-img($limit-origin-size: true, $ratio-prop: width) {\n  $prop: if($limit-origin-size, max-#{$ratio-prop}, #{$ratio-prop});\n  $cross-prop: if($ratio-prop == 'width', 'height', 'width');\n  #{$prop}: 100%;\n  #{$cross-prop}: auto;\n}\n","@mixin rwd-iframe-wrapper($ratio: 16 9) {\n  @if length($ratio) != 2 {\n    @error 'rwd-iframe-wrapper() 믹스인은 영상의 너비, 높이 비율 값을 연속된 숫자 값 리스트로 전달 받습니다. → 예) @include rwd-iframe-wrapper(4 3);';\n  }\n\n  $ratio-first: first($ratio);\n  $ratio-last: last($ratio);\n\n  $min-ratio: min($ratio-first, $ratio-last);\n  $max-ratio: max($ratio-first, $ratio-last);\n\n  $aspect-ratio: $min-ratio / $max-ratio;\n\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-top: percentage($aspect-ratio);\n\n  iframe {\n    @include absolute(t 0 l 0);\n    width: 100%;\n    height: 100%;\n  }\n}\n","@mixin position($position, $args: null) {\n  position: $position;\n\n  @if $args != null {\n    $top-value: get-match-value-of-keys($args, top t);\n    $right-value: get-match-value-of-keys($args, right r);\n    $bottom-value: get-match-value-of-keys($args, bottom b);\n    $left-value: get-match-value-of-keys($args, left l);\n\n    z-index: get-match-value-of-keys($args, z-index z);\n    top: if($top-value, unitless-px($top-value), null);\n    right: if($right-value, unitless-px($right-value), null);\n    bottom: if($bottom-value, unitless-px($bottom-value), null);\n    left: if($left-value, unitless-px($left-value), null);\n  }\n}\n\n//* -------------------------------------------------------------------------- */\n// 단축 믹스인\n\n@mixin static {\n  @include position(static, null);\n}\n\n@mixin absolute($args: null) {\n  @include position(absolute, $args);\n}\n\n@mixin relative($args: null) {\n  @include position(relative, $args);\n}\n\n@mixin fixed($args: null) {\n  @include position(fixed, $args);\n}\n\n@mixin sticky($args: null) {\n  @include position(sticky, $args);\n}\n","@mixin a11y-hidden($focus-visible: false, $focus-state-class: 'focus') {\n  overflow: hidden;\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  clip-path: circle(0);\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n\n  @if $focus-visible {\n    &#{'--' + $focus-state-class}:focus {\n      overflow: visible;\n      position: static;\n      clip: auto;\n      width: auto;\n      height: auto;\n      margin: 0;\n      white-space: normal;\n    }\n  }\n}\n","@mixin focus-visible(\n  $color: rgba(alt-color(state-focus, #1870d4), 0.7),\n  $thickness: 3px\n) {\n  //* 포커스 적용한 경우 */\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 $thickness $color;\n    @content;\n  }\n\n  //* 마우스로 클릭했을 때 */\n  &:focus:not(:focus-visible) {\n    outline: none;\n    box-shadow: none;\n  }\n\n  //* 키보드로 포커싱 되어 화면에 표시 되어야 하는 경우 */\n  &:focus-visible {\n    outline: none;\n    box-shadow: 0 0 0 $thickness $color;\n    @content;\n  }\n}\n","body {\r\n  @include font(size rem(16) family 'Spoqa Han Sans Neo' lh 1.5);\r\n  color: #0584a6;\r\n}\r\n\r\n#{headings(1, 4)} {\r\n  @include m(b 0);\r\n  @include font(weight normal);\r\n}\r\n\r\nh1 {\r\n  @include font(size rem(48) weight 100);\r\n}\r\n\r\nh2 {\r\n  @include font(size rem(36) weight 100);\r\n}\r\n\r\nh3 {\r\n  @include font(size rem(30) weight 300);\r\n}\r\n\r\nh4 {\r\n  @include font(size rem(24) weight 500);\r\n}\r\n","// CSS Font 속성\n// 참고: https://www.w3.org/TR/css-fonts-4/\n\n// font-style\n// font-weight\n// font-variant\n// font-family\n// font-size\n// font-size-adjust\n// font-stretch\n// font-kerning\n// line-height\n\n@mixin font($args) {\n  $props: style weight variant size size-adjust family stretch kerning\n    line-height lh;\n\n  @each $prop in $props {\n    $prop-index: index($args, $prop);\n    @if $prop-index {\n      $value: nth($args, $prop-index + 1);\n      @if $prop == 'line-height' or $prop == 'lh' {\n        line-height: $value;\n      } @else {\n        font-#{$prop}: $value;\n      }\n    }\n  }\n}\n",".button {\r\n  &--back {\r\n    @include absolute(z 1000 t 12 l 20);\r\n    @include font(size rem(30) lh 1);\r\n    @include p(10);\r\n    text-decoration: none;\r\n    color: get-color(white);\r\n  }\r\n}\r\n","@mixin padding($args...) {\n  @if length($args) == 0 {\n    @error 'padding() 믹스인은 padding 속성의 설정 방향 top, right, bottom, left와 값을 연이어 전달 받을 수 있습니다. 뿐만 아니라 x, y 방향으로 속성을 일괄 설정 가능합니다.';\n  }\n\n  @each $value in $args {\n    $type: type-of($value);\n\n    @if $type == 'number' or $type == 'string' {\n      padding: get-number-or-string($value);\n    }\n\n    @if $type == 'list' {\n      @if is-include-items($value, top t) {\n        padding-top: get-number-or-string(\n          get-match-value-of-keys($value, top t)\n        );\n      }\n      @if is-include-items($value, right r) {\n        padding-right: get-number-or-string(\n          get-match-value-of-keys($value, right r)\n        );\n      }\n      @if is-include-items($value, bottom b) {\n        padding-bottom: get-number-or-string(\n          get-match-value-of-keys($value, bottom b)\n        );\n      }\n      @if is-include-items($value, left l) {\n        padding-left: get-number-or-string(\n          get-match-value-of-keys($value, left l)\n        );\n      }\n      @if is-include-items($value, x) {\n        $x-value: get-value-after-key($value, x);\n        padding-left: get-number-or-string($x-value);\n        padding-right: get-number-or-string($x-value);\n      }\n      @if is-include-items($value, y) {\n        $y-value: get-value-after-key($value, y);\n        padding-top: get-number-or-string($y-value);\n        padding-bottom: get-number-or-string($y-value);\n      }\n    }\n  }\n}\n\n//* -------------------------------------------------------------------------- */\n\n@mixin p($args: null) {\n  @if not $args {\n    @error 'p() 믹스인은 padding 속성의 설정 방향 top, right, bottom, left와 값을 연이어 전달 받을 수 있습니다. 뿐만 아니라 x, y 방향으로 속성을 일괄 설정 가능합니다.';\n  }\n  @include padding($args);\n}\n\n@mixin px($value) {\n  $value_length: length($value);\n  @if $value_length == 1 {\n    @include p(l $value r $value);\n  }\n  @if $value_length == 2 {\n    @include p(l first($value) r last($value));\n  }\n}\n\n@mixin py($value) {\n  $value_length: length($value);\n  @if $value_length == 1 {\n    @include p(t $value b $value);\n  }\n  @if $value_length == 2 {\n    @include p(t first($value) b last($value));\n  }\n}\n",".badge {\r\n  @include fixed(t rem(20) r rem(20) z 1000);\r\n  @include focus-visible(get-color(state-focus));\r\n}\r\n",".game {\r\n  @include flex-container(row);\r\n  min-height: rem(16);\r\n  @include m(rem(20));\r\n  font: rem(14) 'Century Gothic', Futura, sans-serif;\r\n\r\n  ol,\r\n  ul {\r\n    padding-left: rem(30);\r\n  }\r\n}\r\n\r\n.board {\r\n  &__row::after {\r\n    content: '';\r\n    display: table;\r\n    clear: both;\r\n  }\r\n\r\n  .info__status {\r\n    margin-left: 0;\r\n    margin-bottom: rem(10);\r\n  }\r\n}\r\n\r\nbutton {\r\n  $bg-color: get-color(cyan);\r\n  border: 0;\r\n  border-radius: 2px;\r\n  padding: 0.34em 0.58em;\r\n  background: $bg-color;\r\n  color: a11y-color(#909090, $bg-color);\r\n  font-weight: bold;\r\n\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    background: get-color(gray);\r\n  }\r\n}\r\n\r\n.button {\r\n  $size: rem(34);\r\n\r\n  &--square {\r\n    float: left;\r\n    width: $size;\r\n    height: $size;\r\n    margin-top: -1px;\r\n    margin-right: -1px;\r\n    border: rem(1) solid get-color(gray);\r\n    background: get-color(white);\r\n    @include font-size-padding(24, 0);\r\n    @include font(weight bold);\r\n    @include text(align center);\r\n\r\n    &:focus {\r\n      $bg-color: get-color(state-focus);\r\n      outline: none;\r\n      background: $bg-color;\r\n      color: get-color(white);\r\n\r\n      &:not(:focus-visible) {\r\n        background: #fefefe;\r\n        color: get-color(black);\r\n      }\r\n\r\n      &-visible {\r\n        background: $bg-color;\r\n        color: get-color(white);\r\n      }\r\n    }\r\n  }\r\n\r\n  &--restart {\r\n    margin-top: rem(10);\r\n  }\r\n}\r\n\r\n.info {\r\n  margin-left: rem(15);\r\n  &__status {\r\n    @include m(l 0 b rem(6));\r\n  }\r\n}\r\n","// Flex Container 요소에 설정 가능한 속성\n// 참고: https://developer.mozilla.org/ko/docs/Glossary/Flex_Container\n// - flex-direction\n// - flex-wrap\n// - justify-content\n// - align-items\n// - align-content\n\n@mixin flex-container($args, $mode: flex) {\n  display: if($mode == flex, flex, inline-flex);\n  @include flex-container-append($args);\n}\n\n@mixin flex-c($args, $mode: flex) {\n  @include flex-container($args, $mode);\n}\n\n@mixin inline-flex-container($args) {\n  @include flex-c($args, inline-flex);\n}\n\n@mixin inline-flex-c($args) {\n  @include inline-flex-container($args);\n}\n","// @include flex-container(row wrap justify-center items-center);\n// @include inline-flex-container();\n\n@mixin flex-container-append($args) {\n  @if $args != null {\n    // flex-direction ------------------------------------------\n    @each $direction in row row-reverse column column-reverse {\n      $direction-index: index($args, $direction);\n\n      @if $direction-index {\n        flex-direction: nth($args, $direction-index);\n      }\n    }\n\n    // flex-wrap -----------------------------------------------\n    @each $wrap in nowrap wrap wrap-reverse {\n      $wrap-index: index($args, $wrap);\n\n      @if $wrap-index {\n        flex-wrap: nth($args, $wrap-index);\n      }\n    }\n\n    // justify-content ------------------------------------------\n    @each $justifyContent\n      in justify-start\n      justify-center\n      justify-end\n      justify-left\n      justify-right\n      justify-normal\n      justify-between\n      justify-around\n      justify-evenly\n      justify-safe\n      justify-unsafe\n      justify-inherit\n      justify-initial\n      justify-unset\n    {\n      $justifyContent-index: index($args, $justifyContent);\n\n      @if $justifyContent-index {\n        $justifyContent-value: str-replace(\n          nth($args, $justifyContent-index),\n          'justify-'\n        );\n        @include justify-content($justifyContent-value, flex);\n      }\n    }\n\n    // align-items ------------------------------------------------\n    @each $alignItems\n      in items-normal\n      items-stretch\n      items-start\n      items-end\n      items-center\n      items-baseline\n      items-first-baseline\n      items-last-baseline\n      items-safe\n      items-unsafe\n      items-inherit\n      items-initial\n      items-unset\n    {\n      $alignItems-index: index($args, $alignItems);\n\n      @if $alignItems-index {\n        $alignItems-value: str-replace(nth($args, $alignItems-index), 'items-');\n        @include align-items($alignItems-value, flex);\n      }\n    }\n\n    // align-content ------------------------------------------------\n    @each $alignContent\n      in content-start\n      content-center\n      content-end\n      content-left\n      content-right\n      content-normal\n      content-baseline\n      content-first-baseline\n      content-last-baseline\n      content-between\n      content-around\n      content-evenly\n      content-stretch\n      content-safe\n      content-unsafe\n      content-inherit\n      content-initial\n      content-unset\n    {\n      $alignContent-index: index($args, $alignContent);\n\n      @if $alignContent-index {\n        $alignContent-value: str-replace(\n          nth($args, $alignContent-index),\n          'content-'\n        );\n        @include align-content($alignContent-value, flex);\n      }\n    }\n  }\n}\n\n@mixin flex-c-a($args) {\n  @include flex-container-append($args);\n}\n","@mixin font-size-padding($font-size, $padding) {\n  // 전달 받은 $padding 유형 검사\n  $type-collection: list number string;\n\n  // 개발자가 요구하는 데이터 유형이 올바르게 전달된 경우 → 처리\n  @if is-valid-types($padding, $type-collection) {\n    $padding-type: type-of($padding);\n    // 숫자인 경우\n    @if $padding-type == 'number' {\n      padding: em($padding, $font-size);\n    }\n\n    // 문자인 경우\n    @if $padding-type == 'string' {\n      padding: $padding;\n    }\n\n    // 리스트인 경우\n    @if $padding-type == 'list' {\n      // 새롭게 반환할 리스트 정의\n      $convert-padding-list: ();\n\n      @each $value in $padding {\n        // 값이 숫자인 경우 (예: 10px)\n        @if type-of($value) == 'number' {\n          $convert-padding-list: append(\n            $convert-padding-list,\n            em($value, $font-size)\n          );\n        }\n\n        // 값이 문자인 경우 (예: auto)\n        @if type-of($value) == 'string' {\n          $convert-padding-list: append($convert-padding-list, $value);\n        }\n      }\n\n      padding: $convert-padding-list;\n    }\n  }\n  // 개발자가 요구하지 않은 데이터 유형이 전달된 경우 → 오류 표시\n  @else {\n    @error '전달 받은 #{$padding} 값은 요구되는 #{join($type-collection, [], $separator: comma, $bracketed: true)} 유형이 아닙니다.';\n  }\n\n  // ----------------------------------------------\n\n  // $font-size 전달 인자: 유효성 검사(validation)\n  @if type-of($font-size) != 'number' {\n    @error '전달 받은 #{$font-size} 값은 숫자 유형이 아닙니다.';\n  }\n  // $font-size 값을 설정\n  font-size: rem($font-size);\n}\n\n// 별칭 믹스인 등록\n@mixin fsp($font-size, $padding) {\n  @include font-size-padding($font-size, $padding);\n}\n","//* CSS Text 속성 -------------------------------------------------------------- */\n// 참고: https://www.w3.org/TR/css-text-3\n\n// text-align\n// text-align-last\n// text-indent\n// text-transform\n\n// letter-spacing\n// word-spacing\n\n// line-break\n// word-break: keep-all\n\n// overflow-wrap\n\n// white-space\n// tab-size\n\n@mixin text($args) {\n  $props: align align-last indent transform letter-spacing ls word-spacing ws\n    line-break lb word-break wb word-wrap ww overflow-wrap ow white-space\n    tab-size ts hyphens;\n\n  // 참고: https://wit.nts-corp.com/2017/07/25/4675\n  //\n  // https://developer.mozilla.org/ko/docs/Web/CSS/word-break\n  word-break: keep-all;\n  // https://developer.mozilla.org/ko/docs/Web/CSS/overflow-wrap\n  // word-wrap과 유사\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n\n  @each $prop in $props {\n    $prop-index: index($args, $prop);\n\n    @if $prop-index {\n      $value: nth($args, $prop-index + 1);\n\n      @if $prop == 'letter-spacing' or $prop == 'ls' {\n        letter-spacing: $value;\n      } @else if $prop == 'word-spacing' or $prop == 'ws' {\n        word-spacing: $value;\n      } @else if $prop == 'line-break' or $prop == 'lb' {\n        line-break: $value;\n      } @else if $prop == 'word-break' or $prop == 'wb' {\n        word-break: $value;\n      } @else if\n        $prop ==\n        'word-wrap' or\n        $prop ==\n        'ww' or\n        $prop ==\n        'overflow-wrap' or\n        $prop ==\n        'ow'\n      {\n        word-wrap: $value;\n        overflow-wrap: $value;\n      } @else if $prop == 'hyphens' {\n        hyphens: $value;\n      } @else if $prop == 'white-space' {\n        white-space: $value;\n      } @else if $prop == 'tab-size' or $prop == 'ts' {\n        tab-size: $value;\n      } @else {\n        text-#{$prop}: $value;\n      }\n    }\n  }\n}\n",".tilt {\r\n  &__root {\r\n    height: 150px;\r\n    width: 200px;\r\n    border-radius: 3px;\r\n    background-color: #000;\r\n    background-image: linear-gradient(135deg, #2f00ff 0%, #00d0ff 100%);\r\n    transform-style: preserve-3d;\r\n    will-change: transform;\r\n    transform: perspective(700px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1);\r\n  }\r\n\r\n  &__child {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 50%;\r\n    height: 50%;\r\n    border-radius: 6px;\r\n    transform: translateX(-50%) translateY(-50%) translateZ(30px);\r\n    box-shadow: 0 0 50px 0 rgba(51, 51, 51, 0.3);\r\n    background-color: #ffffff;\r\n  }\r\n\r\n  &__centered {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n}\r\n","$fg-color: lighten(get-color(state-normal), 25);\r\n\r\n.pokemon-info-app {\r\n  hr {\r\n    @include my(rem(20));\r\n    border: 0;\r\n    border-bottom: 1px solid get-color(gray);\r\n    height: 0;\r\n  }\r\n}\r\n\r\n.pokemon-form {\r\n  small {\r\n    color: $fg-color;\r\n  }\r\n\r\n  .invisible-button {\r\n    @include p(0);\r\n    background: transparent;\r\n    color: get-color(state-focus);\r\n  }\r\n\r\n  .pokemonName-input {\r\n    margin-right: rem(5);\r\n    border: 0;\r\n\r\n    & + button {\r\n      border-radius: 4px;\r\n      padding: 0.5em 0.6em;\r\n    }\r\n  }\r\n\r\n  div {\r\n    margin-top: rem(10);\r\n  }\r\n}\r\n\r\n.pokemon-info {\r\n  color: $fg-color;\r\n  @include relative();\r\n\r\n  .pokemon-info__fetch-time {\r\n    @include absolute(t 8 r 8 z 1000);\r\n    color: get-color(black);\r\n  }\r\n\r\n  img {\r\n    @include rwd-img(false);\r\n  }\r\n\r\n  sup {\r\n    margin-left: rem(5);\r\n    font-size: rem(14);\r\n    vertical-align: rem(12);\r\n  }\r\n\r\n  ul {\r\n    @include reset-list;\r\n\r\n    li {\r\n      flex-direction: row !important;\r\n      label {\r\n        margin-right: 0 !important;\r\n      }\r\n      span {\r\n        margin-left: rem(5);\r\n      }\r\n    }\r\n  }\r\n\r\n  div[role='alert'] {\r\n    @include p(rem(10));\r\n    border-radius: 3px;\r\n    background: get-color(red);\r\n    color: get-color(white);\r\n\r\n    pre {\r\n      margin-bottom: 0;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n}\r\n","@mixin selection($selector: null) {\n  @if $selector == null {\n    ::-moz-selection {\n      @content;\n    }\n    ::selection {\n      @content;\n    }\n  } @else {\n    @each $selector in str-split($selector, ',') {\n      #{$selector}::-moz-selection {\n        @content;\n      }\n      #{$selector}::selection {\n        @content;\n      }\n    }\n  }\n}\n","@include selection() {\r\n  background: get-color(state-selection-bg);\r\n  color: get-color(state-selection-fg);\r\n}\r\n\r\n@include selection('img,button') {\r\n  background: transparent;\r\n}\r\n\r\nhtml {\r\n  overflow-y: scroll;\r\n  min-height: 100.1vh;\r\n}\r\n\r\nbody {\r\n  background: get-color(darkblue);\r\n  color: get-color(white);\r\n}\r\n\r\n#root {\r\n  @include container();\r\n  @include flex-container(column justify-center items-center);\r\n  @include my(rem(100));\r\n\r\n  .weathers--centered {\r\n    margin-bottom: 60px;\r\n    text-align: center;\r\n\r\n    h2 {\r\n      font-size: rem(22);\r\n    }\r\n  }\r\n\r\n  h1 {\r\n    margin-bottom: rem(50);\r\n  }\r\n\r\n  nav {\r\n    @include font(size rem(24));\r\n    width: 100%;\r\n    margin-top: rem(40);\r\n\r\n    strong {\r\n      @include media('<=lg') {\r\n        font-size: rem(18);\r\n      }\r\n    }\r\n  }\r\n\r\n  ol {\r\n    @include reset-list;\r\n    @include media('<=lg') {\r\n      @include mx(rem(10));\r\n    }\r\n  }\r\n\r\n  li {\r\n    @include flex-container(justify-start items-center);\r\n    margin-bottom: rem(10);\r\n    &:last-child {\r\n      margin-bottom: 0;\r\n    }\r\n    @include media('<=md') {\r\n      @include flex-container-append(column items-start);\r\n    }\r\n  }\r\n\r\n  strong {\r\n    @include flex(1);\r\n  }\r\n\r\n  a {\r\n    $color: get-color(cyan);\r\n    text-decoration: none;\r\n    color: $color;\r\n    @include font-size-padding(18, 3);\r\n    transition: color 0.4s ease(out-circ);\r\n    &:hover {\r\n      color: lighten($color, 50%);\r\n    }\r\n    &::after {\r\n      content: ' |';\r\n      color: get-color(white);\r\n    }\r\n    &:last-child::after {\r\n      content: '';\r\n    }\r\n  }\r\n\r\n  label {\r\n    margin-right: rem(10);\r\n  }\r\n\r\n  input {\r\n    border-radius: 4px;\r\n    padding: 0.45em;\r\n  }\r\n}\r\n\r\n.container {\r\n  min-width: rem(300);\r\n  margin-bottom: rem(10);\r\n\r\n  label {\r\n    display: inline-block;\r\n    width: 34%;\r\n  }\r\n\r\n  & + p {\r\n    min-width: rem(300);\r\n  }\r\n}\r\n","// 참고: https://developer.mozilla.org/en-US/docs/Web/CSS/align-items\n\n@mixin align-items($value, $mode: grid) {\n  @if $value == 'normal' {\n    align-items: normal;\n  }\n  @if $value == 'stretch' {\n    align-items: stretch;\n  }\n\n  @if $value == 'start' {\n    align-items: if($mode == grid, start, flex-start);\n  }\n  @if $value == 'end' {\n    align-items: if($mode == grid, end, flex-end);\n  }\n  @if $value == 'center' {\n    align-items: center;\n  }\n\n  @if $value == 'baseline' {\n    align-items: baseline;\n  }\n  @if $value == 'first-baseline' {\n    align-items: first baseline;\n  }\n  @if $value == 'last-baseline' {\n    align-items: last baseline;\n  }\n  @if $value == 'safe' {\n    align-items: safe center;\n  }\n  @if $value == 'unsafe' {\n    align-items: unsafe center;\n  }\n\n  @if $value == 'inherit' {\n    align-items: inherit;\n  }\n  @if $value == 'initial' {\n    align-items: initial;\n  }\n  @if $value == 'unset' {\n    align-items: unset;\n  }\n}\n","//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x':\n    '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x':\n    '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)',\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n        ($prefix == 'min' and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: (\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not(index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    'px': 1px,\n    'cm': 1cm,\n    'mm': 1mm,\n    '%': 1%,\n    'ch': 1ch,\n    'pc': 1pc,\n    'in': 1in,\n    'em': 1em,\n    'rem': 1rem,\n    'pt': 1pt,\n    'ex': 1ex,\n    'vw': 1vw,\n    'vh': 1vh,\n    'vmin': 1vmin,\n    'vmax': 1vmax,\n  );\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge(\n    $media-expressions,\n    $tweak-media-expressions\n  ) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","// 참고: https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\n\n@mixin justify-content($value, $mode: grid) {\n  @if $value == 'start' {\n    justify-content: if($mode == grid, start, flex-start);\n  }\n  @if $value == 'end' {\n    justify-content: if($mode == grid, end, flex-end);\n  }\n  @if $value == 'center' {\n    justify-content: center;\n  }\n  @if $value == 'left' {\n    justify-content: left;\n  }\n  @if $value == 'right' {\n    justify-content: right;\n  }\n\n  @if $value == 'normal' {\n    justify-content: normal;\n  }\n\n  @if $value == 'between' {\n    justify-content: space-between;\n  }\n  @if $value == 'around' {\n    justify-content: space-around;\n  }\n  @if $value == 'evenly' {\n    justify-content: space-evenly;\n  }\n  @if $value == 'stretch' {\n    justify-content: stretch;\n  }\n\n  @if $value == 'safe' {\n    justify-content: safe center;\n  }\n  @if $value == 'unsafe' {\n    justify-content: unsafe center;\n  }\n\n  @if $value == 'inherit' {\n    justify-content: inherit;\n  }\n  @if $value == 'initial' {\n    justify-content: initial;\n  }\n  @if $value == 'unset' {\n    justify-content: unset;\n  }\n}\n","@mixin grow($value: 0) {\n  flex-grow: $value;\n}\n\n@mixin shrink($value: 1) {\n  flex-shrink: $value;\n}\n\n@mixin basis($value: auto) {\n  flex-basis: $value;\n}\n\n@mixin flex($value) {\n  @if $value == 1 {\n    flex: 1 1 0;\n  }\n  @if $value == auto {\n    flex: 1 1 auto;\n  }\n  @if $value == initial {\n    flex: 0 1 auto;\n  }\n  @if $value == none {\n    flex: 0 0 auto;\n  }\n  @if not is-valid-keywords($value, 1 auto initial none) {\n    flex: $value;\n  }\n}\n"]}